{
    "files": [
        "certora/harness/ATokenHarness.sol",
        "certora/harness/PoolHarness.sol",
        "certora/harness/StableDebtTokenHarness.sol",
        "certora/harness/SimpleERC20.sol",
        "certora/munged/protocol/tokenization/VariableDebtToken.sol",
        "certora/munged/misc/AaveProtocolDataProvider.sol",
        "certora/munged/contracts/protocol/libraries/configuration/ReserveConfiguration.sol",
        "certora/munged/protocol/pool/DefaultReserveInterestRateStrategy.sol",
        "certora/munged/contracts/protocol/libraries/types/DataTypes.sol",
        "certora/munged/protocol/configuration/ACLManager.sol",
        "certora/munged/protocol/libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol",
        "certora/munged/protocol/configuration/PriceOracleSentinel.sol",
        "certora/munged/protocol/configuration/PoolAddressesProvider.sol",
    ],
    "link": [
        "ATokenHarness:POOL=PoolHarness",
        "ATokenHarness:_underlyingAsset=SimpleERC20",
        "PoolHarness:ADDRESSES_PROVIDER=PoolAddressesProvider",
        "AaveProtocolDataProvider:ADDRESSES_PROVIDER=PoolAddressesProvider",
    ],
    "struct_link": [
        "PoolHarness:aTokenAddress=ATokenHarness",
        "PoolHarness:stableDebtTokenAddress=StableDebtTokenHarness",
        "PoolHarness:variableDebtTokenAddress=VariableDebtToken",
        "PoolHarness:interestRateStrategyAddress=DefaultReserveInterestRateStrategy",
    ],
    // "rule_sanity": "basic", // from time to time, use advanced instead of basic, it gives more insight on requires, vacuity rules etc.
    "optimistic_loop": true,
    "process": "emv",
    "global_timeout": "7198",
    "prover_args": ["-depth 11"], // If reachability passes and the time is ok, this number is ok, dont touch it.
    "solc": "solc8.10",
    "verify": "PoolHarness:certora/specs/pool-no-summarizations.spec",
    "msg": "withdrawUpdatesBalances mulDivDownAbstractPlus",
    "rule": ["withdrawUpdatesBalances"],
    "parametric_contracts": ["PoolHarness"],
    // method repayWithPermit address,uint256,uint256,address,uint256,uint8,bytes32,bytes32 
}
